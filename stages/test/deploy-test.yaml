apiVersion: marklogic.progress.com/v1
kind: MarklogicCluster
metadata:
  labels:
    app.kubernetes.io/name: ml-primary
    app.kubernetes.io/instance: marklogiccluster-sample
    app.kubernetes.io/part-of: marklogic-operator-kubernetes
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: marklogic-kubernetes-operator
  name: ml-primary
  namespace: ml
spec:
  image: "progressofficial/marklogic-db:11.3.1-ubi-rootless-2.1.1"
# This is the cluster level configuration that will apply to all the groups
  auth:
    secretName: ml1

  persistence:
    enabled: true
    size: 50Gi
    storageClassName: gp3

  ## Configuration for the HAProxy load balancer
  ## An out of box load balancer with configured to handle cookie based session affinity that required by most MarkLogic applications.
  ## It also support multi-statement transaction and ODBC connections.  
  ## Uncomment the following lines to enable HAProxy configuration
  haproxy:
    enabled: true
    pathBasedRouting: true
    frontendPort: 443
    tcpPorts:
      enabled: false
      ports:
        - name: odbc
          type: TCP
          port: 5432
    appServers:
      - name: "app-service"
        port: 8000
        path: "/console"
      - name: "admin"
        port: 8001
        path: "/adminUI"
      - name: "manage"
        port: 8002
        path: "/manage"
    stats:
      enabled: true
      port: 1024

    # Configure Ingress
    # ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ingress: 
      enabled: true
      ingressClassName: "alb"

      ## Ingress labels
      ## ref: https://kubernetes.io/docs/concepts/overvsiew/working-with-objects/labels/
      labels:
        app.kubernetes.io/name: ml-primary
        app.kubernetes.io/instance: ml-primary
    
      ## Ingress annotations
      ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
      annotations: 
        alb.ingress.kubernetes.io/healthcheck-port: '443'
        alb.ingress.kubernetes.io/healthcheck-path: /adminUI
        alb.ingress.kubernetes.io/success-codes: '200-401'
        alb.ingress.kubernetes.io/load-balancer-name: ml-primary
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
        alb.ingress.kubernetes.io/target-group-attributes: load_balancing.algorithm.type=least_outstanding_requests
        alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:308453789681:certificate/4c722368-cdac-4165-9934-522343edde12
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/group.name: ml-primary-group
        alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=600,routing.http.xff_header_processing.mode=append

      # Ingress hosts
      # add default hosts and additional hosts
      # ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
      host: "ml-primary.ml-kube.com"
      additionalHosts: []
    
  #     ## Ingress TLS
  #     ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  #     tls:
  #       secretName: your-certificate-name
  #       hosts:
  #         - marklogic.example.com
  
  logCollection:
    enabled: false
    image: fluent/fluent-bit:3.1.1
    files:
      errorLogs: true
      accessLogs: true
      requestLogs: true
      crashLogs: true
      auditLogs: true
    outputs: |-
        [OUTPUT]
          name loki
          match *
          host marklogic-haproxy.ml-test.svc.cluster.local
          port 8010
          http_user 
          http_passwd 
          URI /logsInjector

  ## To configure networkPolicy, set enabled: true and uncomment the following lines 
  ## Below is an example of networkPolicy, update it as per your requirements
  ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies
  # networkPolicy:
  #   enabled: true
  #   policyTypes:
  #     - Ingress
  #     - Egress
  #   podSelector: {}
  #   ingress:
  #     - from:
  #         - podSelector:
  #             matchLabels:
  #               app.kubernetes.io/name: marklogic
  #               app.kubernetes.io/instance: marklogic
  #       ports:
  #         - protocol: TCP
  #           port: 8000
  #   egress:
  #     - to:
  #         - podSelector:
  #             matchLabels:
  #               app.kubernetes.io/name: marklogic
  #               app.kubernetes.io/instance: marklogicgroup
  #       ports:
  #         - protocol: TCP
  #           port: 8000

  tls:
    enableOnDefaultAppServers: false

  markLogicGroups:
  - replicas: 3
    haproxy:
      enabled: true
      pathBasedRouting: true
    name: ml-primary
    groupConfig:
      name: ml-primary
      enableXdqpSsl: true
    isBootstrap: true
    persistence:
      enabled: true
      size: 50Gi
      storageClassName: gp3
  # - replicas: 2
  #   name: enode
  #   haproxy:
  #     enabled: true
  #   persistence:
  #     enabled: true
  #     size: 25Gi
  #     storageClassName: gp3
  #   groupConfig:
  #     name: enode
  #     enableXdqpSsl: true
  #   isBootstrap: false